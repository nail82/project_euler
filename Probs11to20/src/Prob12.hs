module Prob12 where

{-
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7
= 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?
-}

run12 :: IO ()
run12 = do
  putStr "Problem 12 => "
  putStrLn $ show $ numFactors $ triNum 10000


triNum :: Int -> Int
triNum n = (n ^ (2 :: Int) + n) `div` 2

numFactors :: Int -> Int
numFactors n = let xs = if n `rem` 2 == 0 then [1..n] else filter odd [1..n]
                   f i = if n `rem` i == 0 then 1 else 0
               in sum $ fmap f xs
